# Yaml-files in the `protocol` directory specify which serializable objects
# should be generated. When you add or modify a file, you will need to run
# `serverpod generate` to make the generated classes available in the server and
# client.
#
# Please consult the documentation for more information on what you can add to
# your yaml-files.


# Name of the class to generate.

# Add the table key, if this class represents a row in the database.
#table: example

# The fields (and columns if connected to the database) of the class. Supported types are 
# `bool`, `int`, `double`, `String`, `UuidValue`, `Duration`, `DateTime`, `ByteData`, 
# and other serializable classes, exceptions and enums. 
# You can also add lists of objects and types have support for null safety. 
# Eg. `List<int>?` or `List<MyOtherClass?>`.

class: Saint
table: saint
fields:
  urlImage: String?
  name: String?
  religiousName: String?
  gender: String?
  title: String?
  birth: Birth?, relation(optional)
  death: Death?, relation(optional)
  family: Family?, relation(optional)
  veneration: Veneration?, relation(optional)
  academicTraining: List<String>?
  ecclesiasticalHierarchy: List<EcclesiasticalHierarchy>?, relation
  cononizationDate: Date?
  beatificationDate: Date?
  religiousEvents: List<ReligiousEvent>?, relation
  miracles: List<Miracle>?, relation
  quotations: List<Quotation>?, relation
  prayers: List<String>?
  summary: String?
  sourceLink: String?, scope=serverOnly
  fullText: String?, scope=serverOnly
  sourceHtml: String?, scope=serverOnly
